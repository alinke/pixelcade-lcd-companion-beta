{"version":3,"sources":["assets/pixelcade.png","components/Header/index.tsx","components/Loading/index.tsx","services/index.ts","components/ConsoleList/index.tsx","components/MarqueeItem/index.tsx","components/MarqueeList/index.tsx","hooks/useDebounce.ts","types/DeviceInfo.type.ts","components/MainMenu/index.tsx","assets/default-01.png","assets/default-02.png","assets/default-03.png","components/DefaultMarquee/index.tsx","const/fonts.ts","components/DeviceSettings/index.tsx","services/settings.ts","components/SendText/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","loc","useLocation","nav","useNavigate","_jsxs","style","backgroundColor","children","_jsx","Toaster","className","objectFit","width","maxHeight","src","Logo","alt","pathname","gridTemplateColumns","onClick","Home","marginRight","ArrowBack","Loading","props","isLoading","React","Fragment","getDeviceUrl","version","arguments","length","undefined","concat","window","location","host","readConsoleMarquees","console","requestUrl","axios","get","then","value","data","updateMarquee","marquee","stream","post","updateDefaultMarquee","id","ConsoleList","loading","setLoading","useState","consoles","setConsoles","useEffect","async","readConsoles","catch","finally","loadConsoles","map","item","index","borderRadius","padding","border","color","cursor","name","descriptiveName","numMarquees","MarqueeItem","error","setError","streamImages","useAppSettings","setMarquee","system","apiSystem","systemName","toast","promise","filename","success","flexDirection","justifyContent","userSelect","fontWeight","minHeight","startCase","position","bottom","right","LazyLoad","height","onError","memo","MarqueeList","marqueeData","setMarqueeData","useParams","searchTerm","setSearchTerm","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","setStreamImages","marquees","onChange","e","target","placeholder","type","fontSize","boxSizing","filterdData","filter","RegExp","test","toLowerCase","trim","push","hasVideo","numGIFs","systemManufacturer","year","marginTop","Settings","shutdownSystem","PowerOff","rebootSystem","Refresh","DefaultMarquee","log","filteredMarquees","startsWith","fullFilename","setDefaultMarquee","split","pop","replace","DefaultOne","DefaultTwo","DefaultThree","FontList","DeviceSettings","deviceName","setDeviceName","settings","setSettings","deviceInfo","setDeviceInfo","logContent","setLogContent","readDeviceInfo","readSettings","fetchLogFile","hostname","response","fetch","ok","Error","status","text","message","String","interval","setInterval","clearInterval","getRebootMessage","updateImageMarqueesOnly","toggleVideoMarquees","ImageMarqueesOnly","duration","updateMiniOLEDGlitchMode","toggleMiniOLEDGlitchMode","PixelcadeOLEDGlitch","updateTextOnMainPanel","toggleTextOnMainPanel","SubDisplayScrollingOnly","updateName","newName","updateDeviceName","updateFont","updateDeviceFont","font","updatePixelcadeDotType","updatePixelcadeDotTypeSPI","PixelcadeDotType","updatePixelcadeMiniDisplayType","updatePixelcadeMiniDisplayTypeI2C","PixelcadeMiniDisplayType","updatePixelcadeOLEDMode","updatePixelcadeDeviceOLEDMode","PixelcadeOLEDMode","updateColor","updateFontColor","FontColor","updateMarqueeOverlay","toggleMarqueeOverlays","marqueeOverlays","updateSystem","updateFirmware","gap","margin","event","display","gridGap","Button","variant","lineHeight","firmwareVersion","artworkVersion","resolution","pixelcadeGen","marginLeft","oled","miniLCD","dotMatrix","sevenSegment","hasJoinedNetwork","isPaired","FormControlLabel","control","Switch","checked","label","Select","selectedValue","options","caretIcon","CaretIcon","modalCloseButton","ModalCloseButton","changes","HexColorPicker","thing","overflowY","marginBottom","whiteSpace","wordWrap","flex","SendText","setText","setScrollingText","ApplicationContext","createContext","useContext","App","state","Provider","HashRouter","StickyBox","zIndex","Routes","Route","path","element","MainMenu","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fb121d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pixelcade.698d1ae2.png\";","import { Home } from \"@material-ui/icons\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport React from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Logo from \"../../assets/pixelcade.png\";\n\nconst Header: React.FC = () => {\n    const loc = useLocation();\n    const nav = useNavigate();\n    return (\n        <div style={{ backgroundColor: \"\"}}>\n            <Toaster />\n            <div\n                className=\"layout-grid\"\n                style={{\n                    backgroundColor: \"#000\",\n                }}\n            >\n                <img\n                    style={{\n                        objectFit: \"scale-down\",\n                        width: \"100%\",\n                        maxHeight: 75,\n                    }}\n                    src={Logo}\n                    alt=\"Pixelcade Companion Logo\"\n                />\n            </div>\n            {loc.pathname !== \"/\" && (\n                <div\n                    className=\"layout-grid fade-in\"\n                    style={{\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(75px, 1fr))',\n                        backgroundColor: \"#000\",\n                    }}\n                >\n                    <div\n                        className=\"grid-item nav-element\"\n                        onClick={() => {\n                            nav(\"/\");\n                        }}\n                    >\n                        <Home style={{ marginRight: 8 }} />\n                        HOME\n                    </div>\n                    <div\n                        className=\"grid-item nav-element\"\n                        onClick={() => {\n                            nav(-1);\n                        }}\n                    >\n                        <ArrowBack style={{ marginRight: 8 }} />\n                        GO BACK\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./loading.css\";\nimport Logo from \"../../assets/pixelcade.png\";\n\nconst Loading: React.FC<{ isLoading: boolean }> = (props) => {\n    const { isLoading } = props;\n    return (\n        <React.Fragment>\n            {isLoading && (\n                <div className=\"loading fade-in\">\n                    <img\n                        className=\"pulse\"\n                        src={Logo}\n                        alt=\"Pixelcade Companion Logo\"\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Loading;\n","import axios from \"axios\";\nimport { DeviceInfo } from \"../types/DeviceInfo.type\";\n\nexport const getDeviceUrl = (version: string = \"/v2\"): string => {\n    return `http://${window.location.host}${version}`;\n};\n\nexport const rebootSystem = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/reboot`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const shutdownSystem = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/shutdown`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const readDeviceInfo = (): Promise<DeviceInfo> => {\n    const requestUrl = `${getDeviceUrl()}/info`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const readConsoles = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl()}/info/consoles`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const readConsoleMarquees = (console: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl()}/marquees/${console}`;\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updateMarquee = (\n    console: string,\n    marquee: string,\n    stream: boolean\n) => {\n    const requestUrl = `${getDeviceUrl(\"\")}/arcade/${\n        stream ? \"stream\" : \"write\"\n    }/${console}/${marquee}`;\n\n    return axios.post(requestUrl);\n};\n\nexport const updateDefaultMarquee = (id: string | number) => {\n    const requestUrl = `${getDeviceUrl()}/utility/marquee/set/${id}`;\n    return axios.get(requestUrl);\n};\n\nexport const setScrollingText = (text: string) => {\n    const requestUrl = `${getDeviceUrl(\"\")}/text?t=${text}`;\n    return axios.get(requestUrl);\n};\n\nconst readFilesystemMarquees = (console: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl()}/filesystem/marquees/${console}`;\n    return fetch(requestUrl).then((response) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ConsoleData } from \"../../types/AppContext\";\nimport Loading from \"../Loading\";\nimport { readConsoles } from \"../../services\";\n\nconst ConsoleList: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [consoles, setConsoles] = useState<ConsoleData[]>([]);\n    const nav = useNavigate();\n\n    useEffect(() => {\n        const loadConsoles = async () => {\n            setLoading(true);\n            await readConsoles()\n                .then((value) => {\n                    setConsoles(value.consoles);\n                })\n                .catch()\n                .finally(() => {\n                    setLoading(false);\n                });\n        };\n        loadConsoles();\n    }, []);\n\n    const renderList = () => {\n        return consoles.map((item, index) => {\n            return (\n                <div\n                    className=\"fade-in\"\n                    key={index}\n                    style={{\n                        backgroundColor: \"#456\",\n                        borderRadius: \"4px\",\n                        padding: \".5rem\",\n                        border: \"1px solid #ABABAB\",\n                        color: \"#FFF\",\n                        cursor: \"pointer\",\n                    }}\n                    onClick={() => {\n                        nav(`/marquees/${item.name}`);\n                    }}\n                >\n                    <p>{item.descriptiveName}</p>\n                    <p>{item.numMarquees} Marquees</p>\n                </div>\n            );\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <Loading isLoading={loading} />\n            <div className=\"layout-grid\">{renderList()}</div>\n        </React.Fragment>\n    );\n};\n\nexport default ConsoleList;\n","import React, { useState } from \"react\";\nimport { getDeviceUrl, updateMarquee } from \"../../services\";\nimport { MarqueeInfo } from \"../../types/DeviceInfo.type\";\nimport toast from \"react-hot-toast\";\nimport LazyLoad from \"react-lazyload\";\nimport { startCase } from \"lodash\";\nimport { useAppSettings } from \"../../App\";\n\ntype MarqueeItemProps = {\n    system: string;\n    marquee: MarqueeInfo;\n    onClick?: Function;\n};\n\nconst MarqueeItem: React.FC<MarqueeItemProps> = (props) => {\n    const [error, setError] = useState<boolean>(false);\n    const { marquee } = props;\n\n    const { streamImages } = useAppSettings();\n\n    const setMarquee = () => {\n        const system =\n            marquee.apiSystem === \"user\"\n                ? marquee.systemName\n                : marquee.apiSystem;\n        toast.promise(updateMarquee(system, marquee.filename, streamImages), {\n            loading: \"Updating Marquee\",\n            success: \"Successfully Updated Marquee\",\n            error: \"Couldn't set the marquee\",\n        });\n    };\n    const { onClick = setMarquee } = props;\n    const showMarquee = () => {\n        switch (marquee.id) {\n            case \"bad\":\n                return <div />;\n            default:\n                return (\n                    <React.Fragment>\n                        {error ? (\n                            <div\n                                className=\"grid-item fade-in\"\n                                style={{\n                                    backgroundColor: \"#4c3ba2\",\n                                    flexDirection: \"column\",\n                                    justifyContent: \"center\",\n                                    cursor: \"pointer\",\n                                    userSelect: \"none\",\n                                    fontWeight: 600,\n                                    minHeight: 60,\n                                }}\n                                onClick={() => onClick()}\n                            >\n                                <p>{startCase(marquee.name)}</p>\n                                {marquee.id === \"user\" && (\n                                    <span\n                                        style={{\n                                            position: \"absolute\",\n                                            bottom: \"0px\",\n                                            right: \"0px\",\n                                            backgroundColor: \"rgba(0,0,0,.65)\",\n                                            padding: \"2px 4px\",\n                                            borderRadius: \"4px 0 0 0\",\n                                        }}\n                                    >\n                                        {startCase(marquee.systemName)}\n                                    </span>\n                                )}\n                            </div>\n                        ) : (\n                            <LazyLoad\n                                height={60}\n                                style={{ position: \"relative\" }}\n                            >\n                                <img\n                                    className=\"grid-item fade-in\"\n                                    src={`${getDeviceUrl()}/thumbnails/${marquee.apiSystem}/${marquee.filename}`}\n                                    alt={marquee.filename}\n                                    onError={() => setError(true)}\n                                    style={{\n                                        backgroundColor:\n                                            \"rgba(255, 255, 255, .05)\",\n                                        cursor: \"pointer\",\n                                        position: \"relative\",\n                                        minHeight: 40,\n                                    }}\n                                    onClick={() => setMarquee()}\n                                />\n                                {marquee.id === \"user\" && (\n                                    <span\n                                        style={{\n                                            fontWeight: 600,\n                                            position: \"absolute\",\n                                            bottom: \"0px\",\n                                            right: \"0px\",\n                                            backgroundColor: \"rgba(0,0,0,.65)\",\n                                            padding: \"1px px\",\n                                            borderRadius: \"4px 0 0 0\",\n                                        }}\n                                    >\n                                        {startCase(marquee.systemName)}\n                                    </span>\n                                )}\n                            </LazyLoad>\n                        )}\n                    </React.Fragment>\n                );\n        }\n    };\n\n    return <React.Fragment>{showMarquee()}</React.Fragment>;\n};\n\nexport default React.memo(MarqueeItem);\n","import { FormControlLabel, Switch } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useAppSettings } from \"../../App\";\nimport { useDebounce } from \"../../hooks/useDebounce\";\nimport { readConsoleMarquees } from \"../../services\";\nimport { emptyMarquee, MarqueeInfo } from \"../../types/DeviceInfo.type\";\nimport Loading from \"../Loading\";\nimport MarqueeItem from \"../MarqueeItem\";\n\nconst MarqueeList: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [marqueeData, setMarqueeData] = useState<MarqueeInfo[]>([]);\n    const { system } = useParams();\n    const [searchTerm, setSearchTerm] = useState<string>(\"\");\n    const debouncedSearchTerm = useDebounce(searchTerm, 350);\n    const { streamImages, setStreamImages } = useAppSettings();\n\n    useEffect(() => {\n        if (system) {\n            setLoading(true);\n            readConsoleMarquees(system)\n                .then((data) => {\n                    const { marquees } = data;\n                    setMarqueeData(marquees);\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        }\n    }, [system]);\n\n    const filterdData = () => {\n        let data = marqueeData?.filter((marquee) => {\n            const regex = RegExp(`${debouncedSearchTerm}`, \"i\");\n            return regex.test(marquee.name.toLowerCase().trim());\n        });\n        if (!data) {\n            data = [];\n        }\n        while (data.length < 10) {\n            data.push(emptyMarquee());\n        }\n        return data;\n    };\n\n    return (\n        <React.Fragment>\n            <Loading isLoading={loading} />\n            {!loading && (\n                <div className=\"layout-grid fade-in\">\n                    <input\n                        value={searchTerm}\n                        onChange={(e) => {\n                            setSearchTerm(e.target.value);\n                        }}\n                        placeholder=\"Search...\"\n                        type=\"text\"\n                        id=\"fname\"\n                        name=\"fname\"\n                        style={{\n                            minHeight: 54,\n                            border: \"none\",\n                            borderRadius: 4,\n                            backgroundColor: \"antiquewhite\",\n                            padding: \"0 1rem\",\n                            fontSize: \"1.2rem\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    />\n                     {/* <div\n                        style={{\n                            color: \" rgba(107,0,120,1)\",\n                            backgroundColor: \"antiquewhite\",\n                            padding: \".5rem 0 .5rem 1rem\",\n                            borderRadius: \"4px\",\n                        }}\n                    >\n                     <FormControlLabel\n                            control={\n                                <Switch\n                                    checked={streamImages}\n                                    onChange={() =>\n                                        setStreamImages(!streamImages)\n                                    }\n                                    color=\"primary\"\n                                />\n                            }\n                            label={<span>Stream Marquees to Panel</span>}\n                        /> \n                    </div>*/}\n                </div>\n            )}\n\n            <div className=\"layout-grid fade-in\">\n                {filterdData().map((marquee, index) => {\n                    return (\n                        <MarqueeItem\n                            key={index}\n                            system={system!}\n                            marquee={marquee}\n                        />\n                    );\n                })}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default MarqueeList;\n","import { useState, useEffect } from 'react';\n\nexport function useDebounce(value: any, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed\n    // within the delay period. Timeout gets cleared and restarted.\n    return () => clearTimeout(handler);\n  }, [value, delay]); // Only re-call effect if value or delay changes\n\n  return debouncedValue;\n}\n","export interface DeviceInfo {\n  name: string;\n  hostname: string;\n  firmwareVersion: string;\n  artworkVersion: string;\n  resolution: Resolution;\n  isPaired: boolean;\n  hasJoinedNetwork: boolean;\n  pixelcadeGen: string;\n  oled: boolean;\n  miniLCD: boolean;\n  dotMatrix: boolean;\n  sevenSegment: boolean;\n}\n\nexport interface Resolution {\n  width: number;\n  height: number;\n}\n\n\nexport interface MarqueeInfo {\n  id: string\n  name: string\n  filename: string\n  apiSystem: string\n  systemName: string\n  hasVideo: boolean\n  numGIFs: number\n  systemManufacturer: string\n  year: number\n}\n\nexport const emptyMarquee = () => {\n  return {\n    id: \"bad\",\n    name: \"\",\n    filename: \"\",\n    apiSystem: \"\",\n    systemName: \"\",\n    hasVideo: false,\n    numGIFs: 0,\n    systemManufacturer: \"\",\n    year: 0\n  }\n}","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PowerOff from \"@material-ui/icons/PowerSettingsNew\";\nimport Refresh from \"@material-ui/icons/Refresh\";\nimport { rebootSystem, shutdownSystem } from \"../../services\";\nimport toast from \"react-hot-toast\";\nimport { Settings } from \"@material-ui/icons\";\n\nconst ConsoleList: React.FC = () => {\n    const nav = useNavigate();\n    return (\n        <div className=\"fade-in\">\n            <div className=\"layout-grid\" style={{ marginTop: \"0.5rem\" }}>\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        nav(`/consoles`);\n                    }}\n                >\n                    Browse Marquees\n                </div>\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        nav(`/text`);\n                    }}\n                >\n                    Scrolling Text\n                </div>\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        nav(`/default-marquee`);\n                    }}\n                >\n                    Set Default Marquee\n                </div>\n            </div>\n\n            <div className=\"layout-grid\">\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        nav(`/settings`);\n                    }}\n                >\n                    <Settings style={{ marginRight: 8 }} />\n                    Device Settings & Log\n                </div>\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        toast.promise(shutdownSystem(), {\n                            loading: \"Attempting Shutdown\",\n                            success: \"Shutdown Succeeded\",\n                            error: \"Shutdown Failed\",\n                        });\n                    }}\n                >\n                    <PowerOff style={{ marginRight: 8 }} />\n                    Shutdown\n                </div>\n                <div\n                    className=\"grid-item nav-element\"\n                    onClick={() => {\n                        toast.promise(rebootSystem(), {\n                            loading: `Attempting to Reboot`,\n                            success: \"Reboot Succeeded\",\n                            error: \"Reboot Failed\",\n                        });\n                    }}\n                >\n                    <Refresh style={{ marginRight: 8 }} />\n                    Reboot\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ConsoleList;\n","export default __webpack_public_path__ + \"static/media/default-01.b07219d2.png\";","export default __webpack_public_path__ + \"static/media/default-02.f12529b3.png\";","export default __webpack_public_path__ + \"static/media/default-03.64d2bd2a.png\";","import React, { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport DefaultOne from \"../../assets/default-01.png\";\nimport DefaultTwo from \"../../assets/default-02.png\";\nimport DefaultThree from \"../../assets/default-03.png\";\n\n//import { readConsoleMarquees, updateDefaultMarquee } from \"../../services\";\nimport { readConsoleMarquees, updateDefaultMarquee, updateMarquee } from \"../../services\";  // Added updateMarquee here\nimport { MarqueeInfo } from \"../../types/DeviceInfo.type\";\nimport Loading from \"../Loading\";\nimport MarqueeItem from \"../MarqueeItem\";\nimport { useAppSettings } from \"../../App\";  // Add this import\n\nconst DefaultMarquee: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [marqueeData, setMarqueeData] = useState<MarqueeInfo[]>([]);\n    const {streamImages } = useAppSettings();\n\n    useEffect(() => {\n        setLoading(true);\n        readConsoleMarquees(\"user\")\n            .then((data) => {\n                const { marquees } = data;\n                console.log(\"Received marquees:\", marquees);\n    \n                const filteredMarquees = marquees.filter((marquee: MarqueeInfo) => {\n                    // Skip items with no filename\n                    if (!marquee.filename || !marquee.systemName) {\n                        return false;\n                    }\n    \n                    // Skip hidden system names\n                    if (marquee.systemName.startsWith('._')) {\n                        return false;\n                    }\n    \n                    // The actual file would be in format systemName-filename.jpg\n                    const fullFilename = `${marquee.systemName}-${marquee.filename}.jpg`;\n                    console.log(\"Constructed filename:\", fullFilename);\n    \n                    return true; // Keep all non-hidden marquees with valid filenames\n                });\n    \n                console.log(\"Filtered marquees:\", filteredMarquees);\n                setMarqueeData(filteredMarquees);\n            })\n            .catch(error => {\n                console.error(\"Error loading marquees:\", error);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    const style: React.CSSProperties = {\n        backgroundColor: \"rgba(255, 255, 255, .05)\",\n        cursor: \"pointer\",\n        position: \"relative\",\n        minHeight: 40,\n    };\n    \n    const setDefaultMarquee = (value: string | number) => {\n        // If it's a number (1,2,3), handle default marquees\n        if (typeof value === 'number') {\n            // First update the default marquee setting\n            toast.promise(updateDefaultMarquee(value), {\n                loading: \"Setting default marquee\",\n                success: \"Successfully set default marquee\",\n                error: \"Couldn't set the default marquee\",\n            });\n        } \n        // For custom marquees, extract just the filename without path\n        else if (typeof value === 'string') {\n            const filename = value.split('/').pop();\n            if (filename) {\n                toast.promise(updateDefaultMarquee(filename.replace('.jpg', '')), {\n                    loading: \"Setting default marquee\",\n                    success: \"Successfully set default marquee\",\n                    error: \"Couldn't set the default marquee\",\n                });\n            }\n        }\n        // Now let's display it live\n        const system = \"user\";  \n        const filename = `default${value}`;\n        toast.promise(updateMarquee(system, filename, streamImages), {\n            loading: \"Updating Marquee\",\n            success: \"Successfully Updated Marquee\",\n            error: \"Couldn't set the marquee\",\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"mb-4 p-4 bg-purple-900/30 rounded-md\">\n                <p className=\"text-sm text-gray-300\">\n                    Note: Custom marquee files must follow the naming convention: <span className=\"font-mono bg-black/30 px-2 py-1 rounded\">default-yourfilename.jpg</span>\n                </p>\n            </div>\n            <Loading isLoading={loading} />\n            <div className=\"layout-grid fade-in\">\n                <img\n                    onClick={() => setDefaultMarquee(1)}\n                    style={style}\n                    src={DefaultOne}\n                    alt=\"marquee 1\"\n                    className=\"grid-item fade-in\"\n                />\n                <img\n                    onClick={() => setDefaultMarquee(2)}\n                    style={style}\n                    src={DefaultTwo}\n                    alt=\"marquee 2\"\n                    className=\"grid-item fade-in\"\n                />\n                <img\n                    onClick={() => setDefaultMarquee(3)}\n                    style={style}\n                    src={DefaultThree}\n                    alt=\"marquee 3\"\n                    className=\"grid-item fade-in\"\n                />\n                {marqueeData.map((item: MarqueeInfo) => (\n                    <MarqueeItem\n                        key={item.filename}\n                        system={\"user\"}\n                        marquee={item}\n                        onClick={() => setDefaultMarquee(item.filename.replace('.jpg', ''))}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default DefaultMarquee;","export const FontList: string[] = [\n    \"Orbitron-SemiBold\",\n    \"Arial Narrow 7\",\n    \"Benegraphic\",\n    \"Candy Stripe (BRK)\",\n    \"Casio FX-702P\",\n    \"Daddy Longlegs NF\",\n    \"Decoder\",\n    \"DIG DUG\",\n    \"dotty\",\n    \"DPComic\",\n    \"Early GameBoy\",\n    \"Fiddums Family\",\n    \"Ghastly Panic\",\n    \"GilbertC\",\n    \"Gnuolane\",\n    \"Grapevine\",\n    \"Grinched\",\n    \"Handwriting\",\n    \"Harry P\",\n    \"Haunting Attraction\",\n    \"Minimal4\",\n    \"Morris Roman\",\n    \"MostlyMono\",\n    \"Neon 80s\",\n    \"Nintendo DS BIOS\",\n    \"Not So Stout Deco\",\n    \"Paulistana Deco\",\n    \"Pixelated\",\n    \"Pixeled\",\n    \"RetroBoundmini\",\n    \"RM Typerighter medium\",\n    \"Samba Is Dead\",\n    \"Shlop\",\n    \"Space Patrol NF\",\n    \"Star Jedi Hollow\",\n    \"Star Jedi\",\n    \"Still Time\",\n    \"Tall Films Fine\",\n    \"taller\",\n    \"techno overload (BRK)\",\n    \"TR2N\",\n    \"TRON\",\n    \"Vectroid\",\n    \"Videophreak\",\n];\n","import { Button, FormControlLabel, Switch } from \"@material-ui/core\";\nimport React, { useEffect, useState, ReactElement } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { FontList } from \"../../const/fonts\";\nimport { readDeviceInfo } from \"../../services\";\nimport { DeviceInfo } from \"../../types/DeviceInfo.type\";\nimport {\n  readSettings,\n  toggleMarqueeOverlays,\n  toggleTextOnMainPanel,\n  toggleVideoMarquees,\n  updateDeviceFont,\n  updatePixelcadeDotTypeSPI,\n  updatePixelcadeMiniDisplayTypeI2C,\n  updatePixelcadeDeviceOLEDMode,\n  toggleMiniOLEDGlitchMode,\n  updateDeviceName,\n  updateFirmware,\n  updateFontColor,\n} from \"../../services/settings\";\nimport { HexColorPicker } from \"react-colorful\";\nimport { Select, CaretIcon, ModalCloseButton } from \"react-responsive-select\";\n\nimport \"react-responsive-select/dist/react-responsive-select.css\";\n\ntype SettingType = {\n  font: string;\n  SubDisplayScrollingOnly: boolean;\n  ImageMarqueesOnly: boolean;\n  SubDisplayNumModules: number;\n  FontColor: string;\n  marqueeOverlays: boolean;\n  PixelcadeDotType: string;\n  PixelcadeMiniDisplayType: string;\n  PixelcadeOLEDMode: string;\n  PixelcadeOLEDGlitch: boolean;\n};\n\nconst DeviceSettings = (): ReactElement => {\n  const [deviceName, setDeviceName] = useState<string>(\"\");\n  const [settings, setSettings] = useState<SettingType | undefined>();\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>();\n  const [logContent, setLogContent] = useState<string>(\"\");\n\n  useEffect(() => {\n    readDeviceInfo().then((data) => {\n      setDeviceName(data.name);\n      setDeviceInfo(data);\n    });\n    readSettings()\n      .then((data) => {\n        setSettings(data);\n      })\n      .catch();\n  }, []);\n\n  useEffect(() => {\n    const fetchLogFile = async () => {\n      try {\n        const hostname = window.location.hostname;\n        const response = await fetch(`http://${hostname}:8080/v2/log`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const text = await response.text();\n        setLogContent(text);\n      } catch (error) {\n        setLogContent(\"Error loading log file: \" + (error instanceof Error ? error.message : String(error)));\n      }\n    };\n  \n    // Initial fetch\n    fetchLogFile();\n    \n    // Set up polling interval\n    const interval = setInterval(fetchLogFile, 5000);\n    \n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n    const getRebootMessage = (message: string) => {\n        return (\n            <div>\n                <p>{message}</p>\n            </div>\n        );\n    };\n    const updateImageMarqueesOnly = () => {\n        if (settings) {\n            toast.promise(\n                toggleVideoMarquees(!settings.ImageMarqueesOnly),\n                {\n                    loading: \"Updating video marquees settings\",\n                    success: () => {\n                        setSettings({\n                            ...settings,\n                            ImageMarqueesOnly: !settings.ImageMarqueesOnly,\n                        });\n                        return getRebootMessage(\n                            `Video marquees settings updated`\n                        );\n                    },\n                    error: \"Setting failed\",\n                },\n                { duration: 4000 }\n            );\n        }\n    };\n\n    const updateMiniOLEDGlitchMode = () => {\n      if (settings) {\n          toast.promise(\n            toggleMiniOLEDGlitchMode(!settings.PixelcadeOLEDGlitch),\n              {\n                  loading: \"Updating Mini OLED Glitch Mode\",\n                  success: () => {\n                      setSettings({\n                          ...settings,\n                          PixelcadeOLEDGlitch: !settings.PixelcadeOLEDGlitch,\n                      });\n                      return getRebootMessage(\n                          `Mini OLED Glitch Mode Updated`\n                      );\n                  },\n                  error: \"Mini OLED Glitch Mode Update Failed\",\n              },\n              { duration: 4000 }\n          );\n      }\n  };\n    \n\n    const updateTextOnMainPanel = () => {\n        if (settings) {\n            toast.promise(\n                toggleTextOnMainPanel(!settings.SubDisplayScrollingOnly),\n                {\n                    loading: \"Updating Text scrolling settings\",\n                    success: () => {\n                        setSettings({\n                            ...settings,\n                            SubDisplayScrollingOnly:\n                                !settings.SubDisplayScrollingOnly,\n                        });\n                        return getRebootMessage(\n                            `Text scrolling settings updated`\n                        );\n                    },\n                    error: \"Setting failed\",\n                },\n                { duration: 4000 }\n            );\n        }\n    };\n\n    const updateName = () => {\n        toast.promise(\n            updateDeviceName(deviceName),\n            {\n                loading: \"Updating Device Name\",\n                success: () => {\n                    return getRebootMessage(`Device Name updated`);\n                },\n                error: \"Setting failed\",\n            },\n            { duration: 4000 }\n        );\n    };\n\n    const updateFont = () => {\n        if (settings) {\n            toast.promise(\n                updateDeviceFont(settings.font),\n                {\n                    loading: \"Updating Device Font\",\n                    success: \"Font updated\",\n                    error: \"Setting failed\",\n                },\n                { duration: 4000 }\n            );\n        }\n    };\n\n   const updatePixelcadeDotType = () => {\n      if (settings) {\n          toast.promise(\n              updatePixelcadeDotTypeSPI(settings.PixelcadeDotType),\n              {\n                  loading: \"Updating Pixelcade Sub-Display Type\",\n                  success: \"Sub-Display Type updated\",\n                  error: \"Sub-Display Type Updated Failed\",\n              },\n              { duration: 4000 }\n          );\n      }\n  }; \n\n  const updatePixelcadeMiniDisplayType = () => {\n    if (settings) {\n        toast.promise(\n          updatePixelcadeMiniDisplayTypeI2C(settings.PixelcadeMiniDisplayType),\n            {\n                loading: \"Updating Pixelcade Mini Display Type\",\n                success: \"Pixelcade Mini Display Type Updated\",\n                error: \"Pixelcade Mini Display Updated Failed\",\n            },\n            { duration: 4000 }\n        );\n    }\n}; \n\nconst updatePixelcadeOLEDMode = () => {\n  if (settings) {\n      toast.promise(\n        updatePixelcadeDeviceOLEDMode(settings.PixelcadeOLEDMode),\n          {\n              loading: \"Updating Pixelcade Mini OLED Mode\",\n              success: \"Pixelcade Mini OLED Mode Updated\",\n              error: \"Pixelcade Mini OLED Mode Update Failed\",\n          },\n          { duration: 4000 }\n      );\n  }\n}; \n\n  const updateColor = () => {\n        if (settings) {\n            toast.promise(\n                updateFontColor(settings.FontColor),\n                {\n                    loading: \"Updating Font Color\",\n                    success: \"Font color updated\",\n                    error: \"Setting failed\",\n                },\n                { duration: 4000 }\n            );\n        }\n    };\n\n  const getFonts = () => {\n    return FontList.map((font) => {\n      return {\n        value: font,\n        text: font,\n      };\n    });\n  };\n\n  const updateMarqueeOverlay = () => {\n    if (settings) {\n      toast.promise(\n        toggleMarqueeOverlays(!settings.marqueeOverlays),\n        {\n          loading: \"Updating Marquee Overlay settings\",\n          success: () => {\n            setSettings({\n              ...settings,\n              marqueeOverlays: !settings.marqueeOverlays,\n            });\n            return getRebootMessage(`Marquee Overlay settings updated`);\n          },\n          error: \"Setting failed\",\n        },\n        { duration: 4000 }\n      );\n    }\n  };\n\n  const updateSystem = () => {\n    toast.promise(\n      updateFirmware(),\n      {\n        loading: \"Pixelcade LCD Update Started\",\n        success: () => {\n          return `Please wait until your see the Update Complete message on your Pixelcade before doing anything else.`;\n        },\n        error: \"failed\",\n      },\n      { duration: 4000 }\n    );\n  };\n  \n  return (\n    <div className=\"fade-in\">\n      {settings && (\n        <div className=\"layout-grid\" style={{ marginTop: \"0.5rem\", gap: \"2rem\" }}>\n          {/* Device Name Section */}\n          <div className=\"settings\">\n            <label style={{ margin: \"1rem 0 .5rem 0\" }}>Device Name</label>\n            <input\n              style={{\n                height: 36,\n                fontSize: \"1.2rem\",\n                padding: \"0 0.4rem\",\n              }}\n              type=\"text\"\n              id=\"fname\"\n              name=\"fname\"\n              value={deviceName}\n              onChange={(event) => {\n                setDeviceName(event.target.value);\n              }}\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updateName()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n\n          {/* Device Info Section */}\n          {/* Device Info Section */}\n        <div className=\"settings\">\n          <label style={{ margin: \"1rem 0 .5rem 0\", fontWeight: \"bold\" }}>Device Info</label>\n          {deviceInfo && (\n            <div style={{ fontSize: \"1rem\", lineHeight: \"1.6\" }}>\n              <p><strong>Name:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>{deviceInfo.name}</span></p>\n              <p><strong>Hostname:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>{deviceInfo.hostname}</span></p>\n              <p><strong>Firmware:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>v{deviceInfo.firmwareVersion}</span></p>\n              <p><strong>Artwork Version:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>{deviceInfo.artworkVersion}</span></p>\n              <p><strong>Resolution:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>{deviceInfo.resolution.width}x{deviceInfo.resolution.height}</span></p>\n              <p><strong>Generation:</strong> <span style={{ color: \"#666\", fontWeight: \"normal\" }}>{deviceInfo.pixelcadeGen}</span></p>\n              <p><strong>Connected Sub-Displays:</strong></p>\n              <ul style={{ marginLeft: \"1.5rem\", marginTop: \"0.5rem\", color: \"#666\", fontWeight: \"normal\" }}>\n                {deviceInfo.oled && <li>OLED Display</li>}\n                {deviceInfo.miniLCD && <li>Mini LCD</li>}\n                {deviceInfo.dotMatrix && <li>Dot Matrix</li>}\n                {deviceInfo.sevenSegment && <li>Seven Segment</li>}\n              </ul>\n              <p><strong>Network Status:</strong> <span style={{ color: deviceInfo.hasJoinedNetwork ? \"green\" : \"red\", fontWeight: \"normal\" }}>\n                {deviceInfo.hasJoinedNetwork ? \"Connected\" : \"Not Connected\"}\n              </span></p>\n              <p><strong>Pairing Status:</strong> <span style={{ color: deviceInfo.isPaired ? \"green\" : \"red\", fontWeight: \"normal\" }}>\n                {deviceInfo.isPaired ? \"Paired\" : \"Not Paired\"}\n              </span></p>\n            </div>\n          )}\n        </div>\n\n          {/* Rest of the existing sections stay exactly the same */}\n          <div className=\"settings\">\n            <p>\n              When disabled, Pixelcade will not show video marquees and will show static marquees only.\n            </p>\n            <FormControlLabel\n              style={{ marginTop: \"1.2rem\" }}\n              control={\n                <Switch\n                  checked={!settings.ImageMarqueesOnly}\n                  onChange={() => updateImageMarqueesOnly()}\n                  color=\"primary\"\n                />\n              }\n              label=\"Show Video Marquees\"\n            />\n          </div>\n  \n          {/* Splash Screens Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <p>\n              Disabling splash screens means Pixelcade will not display now playing splash screens, high scores, or marquee overlays. <br></br><br></br>Only a Pixelcade LED marquee\n              (if connected) or a Pixelcade Dot sub-display (if connected) will\n              display scrolling text for now playing game launches and high scores.\n            </p>\n            <FormControlLabel\n              style={{ marginTop: \"1.2rem\" }}\n              control={\n                <Switch\n                  checked={settings.SubDisplayScrollingOnly}\n                  onChange={() => updateTextOnMainPanel()}\n                  color=\"primary\"\n                />\n              }\n              label=\"Disable Splash Screens\"\n            />\n          </div>\n  \n          {/* Font Settings */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <label style={{ margin: \".5rem 0 .5rem 0\" }}>Font</label>\n            <Select\n              selectedValue={settings.font}\n              name=\"font\"\n              options={getFonts()}\n              caretIcon={<CaretIcon />}\n              modalCloseButton={<ModalCloseButton />}\n              onChange={(changes: any) => {\n                const font = changes.value;\n                setSettings({ ...settings, font });\n              }}\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updateFont()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n  \n          {/* Font Color Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <p>\n              Font colors are NOT in use at this time. The font color will always be white. \n            </p>\n            <label style={{ margin: \".5rem 0 .5rem 0\" }}>Font Color</label>\n            <HexColorPicker\n              color={settings.FontColor}\n              onChange={(thing) =>\n                setSettings({\n                  ...settings,\n                  FontColor: thing.replace(\"#\", \"\"),\n                })\n              }\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updateColor()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n  \n          {/* Marquee Overlays Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <p>\n              When disabled, Pixelcade will not show overlays such as high\n              scores in a small bar on the bottom of game marquees.\n            </p>\n            <FormControlLabel\n              style={{ marginTop: \"1.2rem\" }}\n              control={\n                <Switch\n                  checked={settings.marqueeOverlays}\n                  onChange={() => updateMarqueeOverlay()}\n                  color=\"primary\"\n                />\n              }\n              label=\"Show Marquee Overlays\"\n            />\n          </div>\n  \n          {/* Dot Sub-Display Type Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <label style={{ margin: \".5rem 0 .5rem 0\" }}>Pixelcade Dot Sub-Display Type</label>\n            <label style={{ margin: \".5rem 0 .5rem 0\", display: \"block\", color: \"#666\" }}>Please Select Manually</label>\n            <Select\n              selectedValue={settings.PixelcadeDotType}\n              name=\"PixelcadeDotType\"\n              options={[\n                { text: \"Matrix\", value: \"matrix\" },\n                { text: \"7 Segment\", value: \"7segment\" },\n                { text: \"None\", value: \"none\" }\n              ]}\n              caretIcon={<CaretIcon />}\n              modalCloseButton={<ModalCloseButton />}\n              onChange={(changes: any) => {\n                const PixelcadeDotType = changes.value;\n                setSettings({ ...settings, PixelcadeDotType });\n              }}\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updatePixelcadeDotType()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n  \n          {/* Mini Dot Sub-Display Type Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <label style={{ margin: \".5rem 0 .5rem 0\" }}>Pixelcade Mini Dot Sub-Display Type</label>\n            <label style={{ margin: \".5rem 0 .5rem 0\", display: \"block\", color: \"#666\" }}>Auto Detected</label>\n            <Select\n              selectedValue={settings.PixelcadeMiniDisplayType}\n              name=\"PixelcadeMiniDisplayType\"\n              options={[\n                { text: \"Mini OLED\", value: \"oled\" },\n                { text: \"Mini LCD 4 Lines\", value: \"lcd4line\" },\n                { text: \"Mini LCD 2 Lines\", value: \"lcd2line\" },\n                { text: \"None\", value: \"none\" }\n              ]}\n              caretIcon={<CaretIcon />}\n              modalCloseButton={<ModalCloseButton />}\n              onChange={(changes: any) => {\n                const PixelcadeMiniDisplayType = changes.value;\n                setSettings({ ...settings, PixelcadeMiniDisplayType });\n              }}\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updatePixelcadeMiniDisplayType()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n  \n          {/* OLED Mode Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <label style={{ margin: \".5rem 0 .5rem 0\" }}>Pixelcade Mini OLED Mode</label>\n            <Select\n              selectedValue={settings.PixelcadeOLEDMode}\n              name=\"PixelcadeOLEDMode\"\n              options={[\n                { text: \"Marquee Mode\", value: \"marquee\" },\n                { text: \"Metadata Mode\", value: \"metadata\" }\n              ]}\n              caretIcon={<CaretIcon />}\n              modalCloseButton={<ModalCloseButton />}\n              onChange={(changes: any) => {\n                const PixelcadeOLEDMode = changes.value;\n                setSettings({ ...settings, PixelcadeOLEDMode });\n              }}\n            />\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr 2fr\",\n                gridGap: \"1rem\",\n              }}\n            >\n              <div />\n              <Button\n                style={{ marginTop: \"1.2rem\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => updatePixelcadeOLEDMode()}\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n  \n          {/* OLED Glitch Mode Setting */}\n          <div className=\"settings\" style={{ marginTop: \"2rem\" }}>\n            <p>\n              Pixelcade Mini OLED Glitch Mode\n            </p>\n            <FormControlLabel\n              style={{ marginTop: \"1.2rem\" }}\n              control={\n                <Switch\n                  checked={settings.PixelcadeOLEDGlitch}\n                  onChange={() => updateMiniOLEDGlitchMode()}\n                  color=\"primary\"\n                />\n              }\n              label=\"Enable Pixelcade Mini OLED Glitch Mode\"\n            />\n          </div>\n  \n          {/* System Updates Section */}\n          <div\n            className=\"settings\"\n            style={{ \n              display: \"flex\", \n              flexDirection: \"column\",\n              marginTop: \"2rem\"\n            }}\n          >\n            <label style={{ margin: \"1rem 0 .5rem 0\" }}>\n              System and Artwork Updates\n            </label>\n  \n            <p>\n              Network Connectivity Required - USB will not work for this update\n              Check for new system and artwork updates. Pixelcade will display\n              status messages including a message if your Pixelcade is already\n              up to date. Please note that updates can take up to 15 minutes or more\n              depending on your Internet connection speed.\n            </p>\n  \n            <div />\n            <Button\n              style={{ marginTop: \"1.2rem\" }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => updateSystem()}\n            >\n              Check for Updates\n            </Button>\n          </div>\n        </div>\n      )}\n {/* Log Section - Now takes full width and is readable */}\n <div\n        className=\"log-container\"\n        style={{\n          marginTop: \"2rem\",\n          padding: \"1rem\",\n          backgroundColor: \"#f4f4f4\",\n          borderRadius: \"5px\",\n          maxHeight: \"400px\",\n          overflowY: \"auto\",\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <h3 style={{ marginBottom: \"1rem\", color: \"#333\" }}>Pixelcade LCD Log (updates every 5 seconds)</h3>\n        <pre\n          style={{\n            whiteSpace: \"pre-wrap\",\n            wordWrap: \"break-word\",\n            color: \"black\",\n            fontSize: \"1rem\",\n            padding: \"1rem\",\n            backgroundColor: \"#fff\",\n            borderRadius: \"5px\",\n            flex: 1,\n          }}\n        >\n          {logContent}\n        </pre>\n      </div>\n\n\n\n    </div>\n  );\n\n};\n\nexport default DeviceSettings;\n","import axios from \"axios\";\nimport { getDeviceUrl } from \".\";\n\nexport const toggleVideoMarquees = (value: boolean): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=ImageMarqueesOnly&value=${value ? \"yes\" : \"no\"}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const toggleTextOnMainPanel = (value: boolean): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=SubDisplayScrollingOnly&value=${value ? \"yes\" : \"no\"}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const disableVideoMarquees = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=ImageMarqueesOnly&value=yes`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const enableVideoMarquees = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=ImageMarqueesOnly&value=no`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const disableScrolling = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=SubDisplayScrollingOnly&value=yes`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const enableScrolling = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=SubDisplayScrollingOnly&value=no`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updateDeviceName = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=DisplayName&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updateDeviceFont = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=font&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updatePixelcadeDotTypeSPI = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=PixelcadeDotType&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updatePixelcadeMiniDisplayTypeI2C = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=PixelcadeMiniDisplayType&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const updatePixelcadeDeviceOLEDMode = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=PixelcadeOLEDMode&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\n\nexport const updateFontColor = (newName: string): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\n        \"\"\n    )}/settings?key=textColor&value=${newName}`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const readSettings = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=getSettings`;\n\n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n};\n\nexport const toggleMarqueeOverlays = (value: boolean): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=marqueeOverlays&value=${value ? 'yes' : 'no'}`;\n  \n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n  };\n\n  export const toggleMiniOLEDGlitchMode = (value: boolean): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/settings?key=PixelcadeOLEDGlitch&value=${value ? 'yes' : 'no'}`;\n  \n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n  };\n\n\n  export const updateFirmware = (): Promise<any> => {\n    const requestUrl = `${getDeviceUrl(\"\")}/update`;\n  \n    return axios.get(requestUrl).then((value) => {\n        return value.data;\n    });\n  };\n\n","import { Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { setScrollingText } from \"../../services\";\n\nconst SendText: React.FC = () => {\n    const [text, setText] = useState<string>(\"\");\n    return (\n        <div className=\"layout-grid fade-in\" style={{ marginTop: \"0.5rem\" }}>\n            <div\n                className=\"settings\"\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <label style={{ margin: \"1rem 0 .5rem 0\" }}>\n                    Scrolling Text\n                </label>\n\n                <input\n                    style={{\n                        height: 36,\n                        fontSize: \"1.2rem\",\n                        padding: \"0 0.4rem\",\n                    }}\n                    type=\"text\"\n                    id=\"fname\"\n                    name=\"fname\"\n                    value={text}\n                    onChange={(event) => {\n                        setText(event.target.value);\n                    }}\n                />\n                <div\n                    style={{\n                        display: \"grid\",\n                        gridTemplateColumns: \"1fr 2fr\",\n                        gridGap: \"1rem\",\n                    }}\n                >\n                    <div />\n                    <Button\n                        style={{ marginTop: \"1.2rem\" }}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            toast.promise(\n                                setScrollingText(text),\n                                {\n                                    loading: \"Sending message to marquee\",\n                                    success: \"Message sent\",\n                                    error: \"Failed\",\n                                },\n                                { duration: 4000 }\n                            );\n                        }}\n                    >\n                        Send Text\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SendText;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport ConsoleList from \"./components/ConsoleList\";\nimport MarqueeList from \"./components/MarqueeList\";\nimport StickyBox from \"react-sticky-box\";\nimport MainMenu from \"./components/MainMenu\";\nimport DefaultMarquee from \"./components/DefaultMarquee\";\nimport DeviceSettings from \"./components/DeviceSettings\";\nimport SendText from \"./components/SendText\";\n\nexport type ContextType = {\n    streamImages: boolean;\n    setStreamImages: Function;\n};\n\nexport const ApplicationContext = React.createContext<ContextType>(\n    {} as ContextType\n);\nexport const useAppSettings = () => React.useContext(ApplicationContext);\n\nconst App: React.FC = () => {\n    const [streamImages, setStreamImages] = useState<boolean>(false);\n\n    const state = {\n        streamImages,\n        setStreamImages,\n    };\n    return (\n        <ApplicationContext.Provider value={state}>\n            <HashRouter>\n                <StickyBox style={{ zIndex: 100 }}>\n                    <Header />\n                </StickyBox>\n                <Routes>\n                    <Route path=\"/\" element={<MainMenu />} />,\n                    <Route path=\"/consoles\" element={<ConsoleList />} />\n                    ,\n                    <Route path=\"/marquees/:system\" element={<MarqueeList />} />\n                    ,\n                    <Route\n                        path=\"/default-marquee\"\n                        element={<DefaultMarquee />}\n                    />\n                    ,\n                    <Route path=\"/settings\" element={<DeviceSettings />} />\n                    ,\n                    <Route path=\"/text\" element={<SendText />} />\n                </Routes>\n            </HashRouter>\n        </ApplicationContext.Provider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}